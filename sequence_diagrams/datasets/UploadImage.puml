@startuml UploadImage

actor User

participant Middlewares
participant Controllers
database Postgres
participant Multer 

User -> Middlewares ++: GET/datasets/image/id
group step: Authentication
    Middlewares -> Middlewares : checkAuth
else Unauthorized
    autonumber 3
    Middlewares --[#red]> User : 401 Unauthorized - Token not provided
    autonumber 3
    Middlewares --[#red]> User : 401 Unauthorized - Token not valid
end

group step: Ownership 
    autonumber 3
    Middlewares -> Middlewares : checkOwner 
else Unauthorized
    autonumber 4
    Middlewares --[#red]> User : 404 Unauthorized
else Forbidden 
    autonumber 4
    Middlewares --[#red]> User : 403 Forbidden - You are not the owner of this dataset
end

group Upload Image
    autonumber 4
    Middlewares -> Controllers --++: uploadImage
    Controllers -> Postgres ++: findByPk  
    Postgres --> Controllers --: return User
    Controllers -> Controllers: checkCredits
else Insufficient credits
    Controllers --[#red]> User: 400 Bad Request - Insufficient credits
else File is not an image
    autonumber 8
    Controllers --[#red]> User: 400 Bad Request - The uploaded file is not an image
else 
    autonumber 8
    Controllers -> Multer++: upload.single
    Multer --[#green]> Controllers: 200 OK
else Upload Failed
    autonumber 9
    Multer --[#red]> Controllers: 400 Bad Request
    Controllers --[#red]> User: 400 Bad Request
    autonumber 9
    Multer --[#red]> Controllers--: 500 Internal Server Error
    Controllers --[#red]> User: 500 Internal Server Error
else
    autonumber 10
    Controllers -> Postgres ++: removeCredits
    Postgres --[#green]> Controllers --: 200 OK
    Controllers --[#green]> User: 200 OK - Upload completed successfully
else No File
    autonumber 8
    Controllers --[#red]> User --: 400 Bad Request - No file was provided
end

@enduml
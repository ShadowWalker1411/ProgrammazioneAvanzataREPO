@startuml UploadImageFromZip

actor User

participant Middlewares
participant Controllers
database Postgres
participant Multer 

User -> Middlewares ++: GET/Zip/id
group step: Authentication
    Middlewares -> Middlewares : checkAuth
else Unauthorized
    autonumber 3
    Middlewares --[#red]> User : 401 Unauthorized - Token not provided
    autonumber 3
    Middlewares --[#red]> User : 401 Unauthorized - Token not valid
end

group step:Ownership
    autonumber 3
    Middlewares -> Middlewares : checkOwner 
else Unauthorized
autonumber 4
    Middlewares --[#red]> User : 404 Unauthorized
else Forbidden 
    Middlewares --[#red]> User : 403 Forbidden - You are not the owner of this dataset
end

group Upload Image From Zip
    autonumber 4
    Middlewares -> Controllers --++: uploadZip
    Controllers -> Controllers : uploads
else
    autonumber 6
    Controllers --[#red]> User: 400 Bad Request
    autonumber 6
    Controllers --[#red]> User : 400 Bad Request - No file was provided
else    
    autonumber 6
    Controllers --[#red]> User: 500 Internal Server Error
    
else  
    autonumber 6
    Controllers -> Postgres ++: findByPk  
    Postgres --> Controllers --: return User
    Controllers -> Controllers: checkCredits
else Insufficient credits
    Controllers --[#red]> User: 400 Bad Request - Insufficient credits
else File Format Wrong
    autonumber 9
    Controllers --[#red]> User: 400 Bad Request - Invalid file format. Only images are allowed within the zip
    Controllers --[#red]> User: 400 Bad Request - Invalid file format. Only zip files are allowed
else 
    autonumber 8
    Controllers -> Multer++: uploadedFiles.push
    Multer --[#green]> Controllers --: 200 OK
    autonumber 10
    Controllers -> Postgres ++: removeCredits
    Postgres --[#green]> Controllers --: 200 OK
    Controllers --[#green]> User: 200 OK - Upload completed successfully
end

@enduml